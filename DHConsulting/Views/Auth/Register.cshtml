@model DHConsulting.Models.Cliente

@{
    ViewBag.Title = "Registrati";
}

@section style{
    <link href="~/Content/captcha.css" rel="stylesheet" />
    <link href="~/Content/google-login.css" rel="stylesheet" />
}



<main class="min-h-screen">

    <div class="flex">

        <!-- Content -->
        <div class="w-full lg:w-1/2">

            @if (ViewBag.User != null)
            {
                <div class="flex justify-center my-12">
                    <div class="flex w-full max-w-sm overflow-hidden rounded-lg shadow-md border border-red-500">
                        <div class="flex items-center justify-center w-12 bg-red-500">
                            <svg class="w-6 h-6 text-white fill-current" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                                <path d="M20 3.36667C10.8167 3.36667 3.3667 10.8167 3.3667 20C3.3667 29.1833 10.8167 36.6333 20 36.6333C29.1834 36.6333 36.6334 29.1833 36.6334 20C36.6334 10.8167 29.1834 3.36667 20 3.36667ZM19.1334 33.3333V22.9H13.3334L21.6667 6.66667V17.1H27.25L19.1334 33.3333Z" />
                            </svg>
                        </div>

                        <div class="px-4 py-2 -mx-3">
                            <div class="mx-3">
                                <span class="font-semibold text-red-500 dark:text-red-400">Attenzione</span>
                                <p class="text-sm">
                                    @ViewBag.User
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (TempData["Token"] != null)
            {
                <div class="flex justify-center my-12">
                    <div class="flex w-full max-w-sm overflow-hidden rounded-lg shadow-md border border-red-500">
                        <div class="flex items-center justify-center w-12 bg-red-500">
                            <svg class="w-6 h-6 text-white fill-current" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                                <path d="M20 3.36667C10.8167 3.36667 3.3667 10.8167 3.3667 20C3.3667 29.1833 10.8167 36.6333 20 36.6333C29.1834 36.6333 36.6334 29.1833 36.6334 20C36.6334 10.8167 29.1834 3.36667 20 3.36667ZM19.1334 33.3333V22.9H13.3334L21.6667 6.66667V17.1H27.25L19.1334 33.3333Z" />
                            </svg>
                        </div>

                        <div class="px-4 py-2 -mx-3">
                            <div class="mx-3">
                                <span class="font-semibold text-red-500 dark:text-red-400">Attenzione</span>
                                <p class="text-sm">
                                    @TempData["Token"]
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="w-2/3 m-auto my-12">

                <h1 class="text-3xl font-bold mb-4">Crea il tuo account</h1>
                <!-- Form -->
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-red-500" })
                        <p class="text-red-600 italic text-xs text-center py-3">⚠ i campi di questo form sono tutti obbligatori</p>
                        <div class="mb-3">
                            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.Cognome, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.Label("Data di nascita", htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.DataNascita, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1", type = "date" } })
                                @Html.ValidationMessageFor(model => model.DataNascita, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Indirizzo, htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.Indirizzo, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.Indirizzo, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.Label("Città", htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.Citta, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.Citta, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.CF, htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.CF, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.CF, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.Label("P.IVA", htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <span class="text-red-600 italic text-xs">* (indicare al posto del CF se in possesso)</span>
                            <div>
                                @Html.EditorFor(model => model.Piva, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.Piva, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.Label("Telefono", htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div>
                                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1" } })
                                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-red-500" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "text-md font-semibold mx-2" })
                            <div class="relative">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "rounded-md p-2 border-2 w-full mt-1", type = "password", id = "Password" } })
                                <span class="absolute top-1/2 right-3 transform -translate-y-1/2 cursor-pointer" onclick="togglePasswordVisibility()">
                                    <i class="fa fa-eye-slash" id="togglePassword"></i>
                                </span>
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-red-500" })
                            </div>
                        </div>


                        <div class="captcha">
                            <div class="flex items-center">
                                <div class="spinner my-2 mx-1 md:my-4 md:mx-2">
                                    <label>
                                        <input type="checkbox" name="IsCaptchaChecked" id="captchaCheckbox" onclick="disableCheckbox(this)">
                                        <span class="checkmark"><span>&nbsp;</span></span>
                                    </label>
                                </div>
                                <div class="text-sm lg:text-md font-bold">
                                    Non sono un robot
                                </div>
                            </div>
                            <div class="logo flex items-center md:flex-col">
                                <img src="https://forum.nox.tv/core/index.php?media/9-recaptcha-png/" />
                                <div class="ms-2 md:ms-0">
                                    <p>reCAPTCHA</p>
                                    <small>Privacy - Terms</small>
                                </div>
                            </div>
                        </div>


                        <div>
                            <input type="submit" value="Registrati" class="btn bg-slate-200 hover:bg-slate-500 text-black hover:text-white w-full" />
                        </div>

                    </div>
                }

                <div class="divider -mb-2 mt-5">oppure</div>

                <div class="mt-7 flex justify-center login-div p-3 rounded-md bg-white">
                    <a href="@ViewBag.Response" class="login-with-google-btn rounded-md flex justify-center items-center">
                        <img src="https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg" alt="logo-google" class="h-4 me-2" />
                        Accedi con Google
                    </a>
                </div>

                <!-- Footer -->
                <div class="border-t-2 py-5 mt-8">
                    <div class="text-md">
                        Sei già iscritto? <a class="text-indigo-500" href="~/Auth/Login">Login</a>
                    </div>
                </div>

            </div>


        </div>

        <!-- Image -->
        <div class="hidden lg:block relative w-1/2" style="background: url(https://images.unsplash.com/photo-1667239711059-9e5d970eb007?w=600&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTQ2fHxsb2dpbnxlbnwwfHwwfHx8MA%3D%3D); background-size: cover;">
            <img class="absolute" style="top:30%; left: -8%" src="https://preview.cruip.com/mosaic/images/auth-decoration.png" width="150" height="180" alt="Authentication decoration">
        </div>

    </div>

</main>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var isCaptchaChecked = false;

        function disableCheckbox(checkbox) {
            isCaptchaChecked = checkbox.checked;
            if (checkbox.checked) {
                checkbox.disabled = true;
            }
        }

        document.querySelector("form").addEventListener("submit", function (e) {
            if (!isCaptchaChecked) {
                e.preventDefault();
                alert("Devi confermare di non essere un robot.");
            }
        });
    </script>
    <script>
        function togglePasswordVisibility() {
            var passwordInput = document.getElementById('Password');
            var passwordIcon = document.getElementById('togglePassword');

            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                passwordIcon.className = 'fa fa-eye';
            } else {
                passwordInput.type = 'password';
                passwordIcon.className = 'fa fa-eye-slash';
            }
        }
    </script>
}
