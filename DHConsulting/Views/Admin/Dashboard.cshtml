@model IEnumerable<DHConsulting.Models.Ordine>

@{
    ViewBag.Title = "Dashboard";
    var basic = ViewBag.Basic as List<DHConsulting.Models.Dettaglio>;
    var plus = ViewBag.Plus as List<DHConsulting.Models.Dettaglio>;
    var pro = ViewBag.Pro as List<DHConsulting.Models.Dettaglio>;
    var totaleBasic = basic.Sum(dettaglio => dettaglio.Quantita);
    decimal totaleFullBasic = basic.Sum(dettaglio => dettaglio.Quantita * dettaglio.Prodotto.Costo);
    var totalePlus = plus.Sum(dettaglio => dettaglio.Quantita);
    decimal totaleFullPlus = plus.Sum(dettaglio => dettaglio.Quantita * dettaglio.Prodotto.Costo);
    var totalePro = pro.Sum(dettaglio => dettaglio.Quantita);
    decimal totaleFullPro = pro.Sum(dettaglio => dettaglio.Quantita * dettaglio.Prodotto.Costo);
    decimal somma = totaleFullBasic + totaleFullPlus + totaleFullPro;
    decimal media = somma / Model.Count();
}

<section class="flex flex-col lg:flex-row justify-evenly antialiased">
    <div class="max-w-3xl p-4 sm:px-6">
        <!-- Chart widget -->
        <div class="flex flex-col col-span-full xl:col-span-8 shadow-lg rounded-md border border-gray-200">
            <header class="px-5 py-4 border-b border-gray-100 flex items-center">
                <h2 class="font-semibold">Dashboard</h2>
            </header>
            <div class="p-5">
                <div class="flex w-full">
                    <!-- Unique Visitors -->
                    <div class="w-1/3 flex items-center justify-center border-e-2">
                        <div class="flex flex-col items-center justify-center">
                            <div>
                                <div class="text-3xl font-bold">@somma.ToString("C")</div>
                            </div>
                            <div class="text-sm text-gray-500">Totale</div>
                        </div>
                    </div>
                    <!-- Total Pageviews -->
                    <div class="w-1/3 flex items-center justify-center border-e-2">
                        <div class="flex flex-col items-center justify-center">
                            <div>
                                <div class="text-3xl font-bold">@DateTime.Now.Year</div>
                            </div>
                            <div class="text-sm text-gray-500">Anno</div>
                        </div>
                    </div>
                    <!-- Bounce Rate -->
                    <div class="w-1/3 items-center justify-center flex">
                        <div class="flex flex-col items-center justify-center">
                            <div>
                                <div class="text-3xl font-bold">@media.ToString("C")</div>
                            </div>
                            <div class="text-sm text-gray-500">Valore Medio</div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Chart built with Chart.js 3 -->
            <div class="flex-grow px-2">
                <canvas id="analytics-card-01" width="800" height="300"></canvas>
            </div>
        </div>
    </div>
    <div class="p-4 sm:px-6">
        <div>
            <div class="flex items-center border rounded-md px-4 py-5 shadow-md mb-11">
                <img src="https://cdn.pixabay.com/photo/2018/08/18/13/26/interface-3614766_1280.png" alt="info" class="h-20 w-20 rounded-full me-3" />
                <div>
                    <h3 class="font-bold text-lg">Pacchetto basic</h3>
                    <p>Venduti: @totaleBasic</p>
                    <p>Totale: @totaleFullBasic.ToString("C")</p>
                </div>
            </div>
            <div class="flex items-center border rounded-md px-4 py-5 shadow-md mb-11">
                <img src="https://cdn.pixabay.com/photo/2018/08/18/13/26/interface-3614766_1280.png" alt="info" class="h-20 w-20 rounded-full me-3" />
                <div>
                    <h3 class="font-bold text-lg">Pacchetto plus</h3>
                    <p>Venduti: @totalePlus</p>
                    <p>Totale: @totaleFullPlus.ToString("C")</p>
                </div>
            </div>
            <div class="flex items-center border rounded-md px-4 py-5 shadow-md">
                <img src="https://cdn.pixabay.com/photo/2018/08/18/13/26/interface-3614766_1280.png" alt="info" class="h-20 w-20 rounded-full me-3" />
                <div>
                    <h3 class="font-bold text-lg">Pacchetto pro</h3>
                    <p>Venduti: @totalePro</p>
                    <p>Totale: @totaleFullPro.ToString("C")</p>
                </div>
            </div>
        </div>
    </div>
</section>
<section class="my-12 px-4 sm:px-6">
    <div class="w-full max-w-6xl mx-auto shadow-lg rounded-md border border-gray-200">
        <header class="px-5 py-4 border-b border-gray-100">
            <h2 class="font-semibold">Riepilogo ordini</h2>
        </header>
        <div class="p-3">
            <div class="overflow-x-auto">
                <table class="table-auto w-full">
                    <thead class="text-xs font-semibold uppercase">
                        <tr>
                            <th class="p-2 whitespace-nowrap">
                                <div class="font-semibold text-left"></div>
                            </th>
                            <th class="p-2 whitespace-nowrap">
                                <div class="font-semibold text-left">Id ordine</div>
                            </th>
                            <th class="p-2 whitespace-nowrap">
                                <div class="font-semibold text-left">Cliente</div>
                            </th>
                            <th class="p-2 whitespace-nowrap">
                                <div class="font-semibold text-left">Data ordine</div>
                            </th>
                            <th class="p-2 whitespace-nowrap">
                                <div class="font-semibold text-left">Totale</div>
                            </th>
                        </tr>
                    </thead>
                    <tbody class="text-sm divide-y divide-gray-100">
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="p-2 whitespace-nowrap">
                                    <div><i class="fa-solid fa-clipboard-list text-2xl"></i></div>
                                </td>
                                <td class="p-2 whitespace-nowrap">
                                    <div class="font-medium">@item.IdOrdine</div>
                                </td>
                                <td class="p-2 whitespace-nowrap">
                                    <div class="text-left">@item.Cliente.Nome @item.Cliente.Cognome</div>
                                </td>
                                <td class="p-2 whitespace-nowrap">
                                    <div class="text-left">@string.Format("{0:d}",item.DataOrdine)</div>
                                </td>
                                @{
                                    decimal tot = 0;
                                    foreach (var prod in item.Dettaglio)
                                    {
                                        tot += prod.Quantita * prod.Prodotto.Costo;
                                    }
                                }
                                <td class="p-2 whitespace-nowrap">
                                    <div class="text-left font-medium text-green-500">@tot.ToString("C")</div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>


@section scripts{
    <script>
        window.console = window.console || function (t) { };
    </script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.0/chart.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/chartjs-adapter-moment/1.0.0/chartjs-adapter-moment.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.5.2/cdn.js'></script>
    <script id="rendered-js">
        // Helper function to display thousands in K format
        const formatThousands = value => Intl.NumberFormat('eu-IT', {
            maximumSignificantDigits: 3,
            notation: 'compact'
        }).
            format(value);
        // Define Chart.js default settings
        Chart.defaults.font.family = '"Inter", sans-serif';
        Chart.defaults.font.weight = '500';
        Chart.defaults.color = 'rgb(148, 163, 184)';
        Chart.defaults.scale.grid.color = 'rgb(241, 245, 249)';
        Chart.defaults.plugins.tooltip.titleColor = 'rgb(30, 41, 59)';
        Chart.defaults.plugins.tooltip.bodyColor = 'rgb(30, 41, 59)';
        Chart.defaults.plugins.tooltip.backgroundColor = '#FFF';
        Chart.defaults.plugins.tooltip.borderWidth = 1;
        Chart.defaults.plugins.tooltip.borderColor = 'rgb(226, 232, 240)';
        Chart.defaults.plugins.tooltip.displayColors = false;
        Chart.defaults.plugins.tooltip.mode = 'nearest';
        Chart.defaults.plugins.tooltip.intersect = false;
        Chart.defaults.plugins.tooltip.position = 'nearest';
        Chart.defaults.plugins.tooltip.caretSize = 0;
        Chart.defaults.plugins.tooltip.caretPadding = 20;
        Chart.defaults.plugins.tooltip.cornerRadius = 4;
        Chart.defaults.plugins.tooltip.padding = 8;
        // A chart built with Chart.js 3
        // https://www.chartjs.org/
        const ctx = document.getElementById('analytics-card-01');
        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [
                    '01-01-2023', '02-01-2023',
                    '03-01-2023', '04-01-2023', '05-01-2023',
                    '06-01-2023', '07-01-2023', '08-01-2023',
                    '09-01-2023', '10-01-2023', '11-01-2023',
                ],
                datasets: [
                    // Indigo line
                    {
                        label: 'Current',
                        data: [
                            5000, 8700, 7500, 12000, 11000, 9500, 10500,
                            10000, 15000, 9000, 10000
                        ],
                        fill: true,
                        backgroundColor: 'rgba(59, 130, 246, 0.08)',
                        borderColor: 'rgb(99, 102, 241)',
                        borderWidth: 2,
                        tension: 0,
                        pointRadius: 0,
                        pointHoverRadius: 3,
                        pointBackgroundColor: 'rgb(99, 102, 241)'
                    },
                    // Gray line
                    //{
                    //    label: 'Previous',
                    //    data: [
                    //        8000, 5000, 6500, 5000, 6500, 12000, 8000,
                    //        9000, 8000, 8000, 12500, 10000, 10000, 12000,
                    //        11000, 16000, 12000, 10000, 10000, 14000, 9000,
                    //        10000, 15000, 12500, 14000, 11000
                    //    ],
                    //    borderColor: 'rgb(203, 213, 225)',
                    //    fill: false,
                    //    borderWidth: 2,
                    //    tension: 0,
                    //    pointRadius: 0,
                    //    pointHoverRadius: 3,
                    //    pointBackgroundColor: 'rgb(203, 213, 225)'
                    //}
                ]
            },
            options: {
                layout: {
                    padding: 20
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            drawBorder: false
                        },
                        ticks: {
                            callback: value => formatThousands(value)
                        }
                    },
                    x: {
                        type: 'time',
                        time: {
                            parser: 'MM-DD-YYYY',
                            unit: 'month',
                            displayFormats: {
                                month: 'MMM YY'
                            }
                        },
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            autoSkipPadding: 48,
                            maxRotation: 0
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            title: () => false, // Disable tooltip title
                            label: context => formatThousands(context.parsed.y)
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'nearest'
                },
                maintainAspectRatio: false
            }
        });
            //# sourceURL=pen.js
    </script>

}