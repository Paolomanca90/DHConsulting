@model IEnumerable<DHConsulting.Models.Dettaglio>

@{
    ViewBag.Title = "Carrello";
    List<DHConsulting.Models.Prodotto> lista = ViewBag.Prodotti as List<DHConsulting.Models.Prodotto>;
    DHConsulting.Models.Cliente cliente = ViewBag.Cliente as DHConsulting.Models.Cliente;
    string clientId = System.Configuration.ConfigurationManager.AppSettings["PayPalClientId"];
}

@section style{
    <style>
        .cart-hero {
            background: linear-gradient(135deg, #0a0a0a 0%, #1f1f1f 50%, #2a2a2a 100%);
            position: relative;
            overflow: hidden;
        }

        .floating-particles {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        .particle {
            position: absolute;
            background: rgba(251, 191, 36, 0.1);
            border-radius: 50%;
            animation: float 8s ease-in-out infinite;
        }

            .particle:nth-child(1) {
                width: 200px;
                height: 200px;
                top: 10%;
                left: 5%;
                animation-delay: 0s;
            }

            .particle:nth-child(2) {
                width: 150px;
                height: 150px;
                top: 60%;
                right: 10%;
                animation-delay: -3s;
            }

            .particle:nth-child(3) {
                width: 100px;
                height: 100px;
                bottom: 20%;
                left: 30%;
                animation-delay: -6s;
            }

        @@keyframes float {
            0%, 100% {
                transform: translateY(0px) rotate(0deg);
            }

            33% {
                transform: translateY(-20px) rotate(2deg);
            }

            66% {
                transform: translateY(10px) rotate(-1deg);
            }
        }

        .cart-item-card {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
        }

            .cart-item-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 20px 40px rgba(251, 191, 36, 0.15);
            }

        .quantity-controls {
            background: #f8fafc;
            border-radius: 12px;
            padding: 0.5rem;
        }

        .quantity-btn {
            width: 40px;
            height: 40px;
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            text-decoration: none;
            color: #6b7280;
        }

            .quantity-btn:hover {
                border-color: #fbbf24;
                background: #fbbf24;
                color: white;
                transform: scale(1.1);
            }

        .quantity-display {
            min-width: 60px;
            text-align: center;
            font-weight: 600;
            font-size: 1.125rem;
        }

        .payment-methods {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border: 2px solid #e2e8f0;
            border-radius: 1.5rem;
            padding: 2rem;
        }

        .payment-method-btn {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

            .payment-method-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            }

        .paypal-btn {
            background: linear-gradient(135deg, #ffc439 0%, #003087 100%);
        }

            .paypal-btn:hover {
                background: linear-gradient(135deg, #ffb700 0%, #001a4d 100%);
            }

            .paypal-btn:disabled {
                background: #9ca3af;
                cursor: not-allowed;
                opacity: 0.5;
            }

        .empty-cart-animation {
            animation: bounce 2s infinite;
        }

        @@keyframes bounce {
            0%, 20%, 53%, 80%, 100% {
                animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);
                transform: translate3d(0,0,0);
            }

            40%, 43% {
                animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
                transform: translate3d(0, -15px, 0);
            }

            70% {
                animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
                transform: translate3d(0, -7px, 0);
            }

            90% {
                transform: translate3d(0,-2px,0);
            }
        }

        .checkout-summary {
            background: linear-gradient(145deg, #ffffff 0%, #f9fafb 100%);
            border: 2px solid #e5e7eb;
            border-radius: 1.5rem;
            padding: 2rem;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 2rem;
        }

        .user-form-section {
            background: linear-gradient(145deg, #ffffff 0%, #f9fafb 100%);
            border: 2px solid #e5e7eb;
            border-radius: 1.5rem;
            padding: 2rem;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .auth-tabs {
            display: flex;
            background: #f1f5f9;
            border-radius: 12px;
            padding: 6px;
            margin-bottom: 2rem;
        }

        .auth-tab {
            flex: 1;
            padding: 12px 24px;
            text-align: center;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            background: transparent;
            color: #6b7280;
        }

            .auth-tab.active {
                background: white;
                color: #fbbf24;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            }

        .form-group {
            margin-bottom: 1.5rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
                font-weight: 600;
                color: #374151;
            }

            .form-group input {
                width: 100%;
                padding: 12px 16px;
                border: 2px solid #e5e7eb;
                border-radius: 8px;
                transition: all 0.3s ease;
                font-size: 1rem;
            }

                .form-group input:focus {
                    outline: none;
                    border-color: #fbbf24;
                    box-shadow: 0 0 0 3px rgba(251, 191, 36, 0.1);
                }

                .form-group input.error {
                    border-color: #ef4444;
                    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
                }

        .field-validation-error {
            color: #ef4444 !important;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
        }

        .validation-summary-errors ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .validation-summary-errors li {
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background: rgba(239, 68, 68, 0.1);
            border-radius: 0.375rem;
            border-left: 4px solid #ef4444;
        }

        .alert {
            padding: 1rem;
            border-radius: 0.75rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .alert-error {
            background: linear-gradient(145deg, #fef2f2 0%, #fee2e2 100%);
            border: 2px solid #fecaca;
            color: #dc2626;
        }

            .alert-error svg {
                color: #dc2626;
                flex-shrink: 0;
            }

        .required {
            color: #ef4444;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .auth-form {
            display: none;
        }

            .auth-form.active {
                display: block;
            }

        .submit-btn {
            width: 100%;
            padding: 14px 24px;
            background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
            color: #000;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

            .submit-btn:hover {
                background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
                transform: translateY(-2px);
                box-shadow: 0 10px 25px rgba(251, 191, 36, 0.3);
            }

            .submit-btn:disabled {
                background: #9ca3af;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .google-login-btn {
            width: 100%;
            padding: 12px 24px;
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            font-weight: 600;
            text-decoration: none;
            color: #374151;
            transition: all 0.3s ease;
        }

            .google-login-btn:hover {
                border-color: #4285f4;
                background: #f8f9ff;
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(66, 133, 244, 0.15);
            }

        .total-display {
            background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
            color: #000;
            padding: 1rem 1.5rem;
            border-radius: 1rem;
            font-weight: 700;
            font-size: 1.5rem;
            text-align: center;
            margin: 1.5rem 0;
        }

        .security-badges {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .security-badge {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .progress-steps {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 2rem;
        }

        .step {
            display: flex;
            align-items: center;
            color: #6b7280;
        }

            .step.active {
                color: #fbbf24;
            }

        .step-circle {
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            background: #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 0.75rem;
        }

        .step.active .step-circle {
            background: #fbbf24;
            color: #000;
        }

        .step-connector {
            width: 3rem;
            height: 2px;
            background: #e5e7eb;
            margin: 0 1rem;
        }

        .step.active .step-connector {
            background: #fbbf24;
        }

        .continue-shopping {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .continue-shopping:hover {
                background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
                transform: translateY(-2px);
                box-shadow: 0 10px 25px rgba(107, 114, 128, 0.3);
                color: white;
            }

        .login-prompt {
            background: linear-gradient(145deg, #fef3c7 0%, #fde68a 100%);
            border: 2px solid #fbbf24;
            border-radius: 1rem;
            padding: 1.5rem;
            text-align: center;
            margin-bottom: 2rem;
        }

            .login-prompt h3 {
                color: #92400e;
                font-size: 1.25rem;
                font-weight: 700;
                margin-bottom: 0.5rem;
            }

            .login-prompt p {
                color: #78350f;
                margin-bottom: 0;
            }

        @@media (max-width: 1024px) {
            .checkout-summary {
                position: static;
                margin-top: 2rem;
            }

            .form-row {
                grid-template-columns: 1fr;
            }
        }

        @@media (max-width: 768px) {
            .user-form-section,
            .checkout-summary {
                padding: 1.5rem;
            }
        }
    </style>
}

@if (TempData["Successo"] != null)
{
    <div class="flex justify-center py-12">
        <div class="alert alert-success shadow-lg max-w-md">
            <div>
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div>
                    <h3 class="font-bold">Complimenti!</h3>
                    <div class="text-xs">@TempData["Successo"]</div>
                </div>
            </div>
        </div>
    </div>
}

@if (TempData["Errore"] != null)
{
    <div class="flex justify-center py-12">
        <div class="alert alert-error shadow-lg max-w-md">
            <div>
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div>
                    <h3 class="font-bold">Attenzione!</h3>
                    <div class="text-xs">@TempData["Errore"]</div>
                </div>
            </div>
        </div>
    </div>
}

@if (Model == null || !Model.Any())
{
    <!-- Empty Cart -->
    <section class="cart-hero min-h-screen flex items-center justify-center">
        <!-- Floating Particles -->
        <div class="floating-particles">
            <div class="particle"></div>
            <div class="particle"></div>
            <div class="particle"></div>
        </div>

        <div class="relative z-10 container mx-auto px-4 text-center text-white">
            <div class="max-w-2xl mx-auto">
                <!-- Empty Cart Icon -->
                <div class="empty-cart-animation mb-8">
                    <div class="w-32 h-32 bg-yellow-500/20 border-4 border-yellow-500 rounded-full flex items-center justify-center mx-auto mb-6">
                        <i class="fa-solid fa-shopping-cart text-6xl text-yellow-400"></i>
                    </div>
                </div>

                <h1 class="text-5xl md:text-6xl font-bold mb-6">
                    Il Tuo Carrello è
                    <span class="text-gradient font-caveat text-6xl md:text-7xl block">Vuoto</span>
                </h1>

                <p class="text-xl text-gray-300 mb-8 max-w-lg mx-auto leading-relaxed">
                    Non hai ancora aggiunto nessun servizio al carrello.
                    Scopri i nostri pacchetti e inizia il tuo viaggio digitale!
                </p>

                <!-- CTA Buttons -->
                <div class="flex flex-col sm:flex-row gap-4 justify-center">
                    <a href="@Url.Action("Index", "Home", new { }, null)#service"
                       class="btn btn-lg btn-primary px-8">
                        <i class="fa-solid fa-eye mr-2"></i>
                        Scopri i Servizi
                    </a>
                    <a href="@Url.Action("About", "Home")"
                       class="btn btn-lg glass-effect text-white hover:bg-yellow-500/20 border-yellow-500/30 px-8">
                        <i class="fa-solid fa-info-circle mr-2"></i>
                        Chi Siamo
                    </a>
                </div>

                <!-- Features -->
                <div class="grid md:grid-cols-3 gap-6 mt-16 max-w-4xl mx-auto">
                    <div class="text-center">
                        <div class="w-16 h-16 bg-yellow-500/20 border-2 border-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fa-solid fa-shield-halved text-2xl text-yellow-400"></i>
                        </div>
                        <h3 class="font-bold text-lg mb-2">Pagamenti Sicuri</h3>
                        <p class="text-gray-400">Transazioni protette e crittografate</p>
                    </div>
                    <div class="text-center">
                        <div class="w-16 h-16 bg-yellow-500/20 border-2 border-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fa-solid fa-rocket text-2xl text-yellow-400"></i>
                        </div>
                        <h3 class="font-bold text-lg mb-2">Risultati Rapidi</h3>
                        <p class="text-gray-400">Progetti consegnati nei tempi concordati</p>
                    </div>
                    <div class="text-center">
                        <div class="w-16 h-16 bg-yellow-500/20 border-2 border-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fa-solid fa-headset text-2xl text-yellow-400"></i>
                        </div>
                        <h3 class="font-bold text-lg mb-2">Supporto</h3>
                        <p class="text-gray-400">Assistenza garantita per tutti i clienti</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
else
{
    <!-- Cart with Items -->
    <section class="py-24 bg-gradient-to-br from-gray-50 via-gray-100 to-gray-200 min-h-screen">
        <div class="container mx-auto px-4">
            <div class="max-w-7xl mx-auto">
                <!-- Progress Steps -->
                <div class="progress-steps" data-aos="fade-up" data-aos-delay="100">
                    <div class="step active">
                        <div class="step-circle">1</div>
                        <span class="hidden sm:inline">Carrello</span>
                    </div>
                    <div class="step-connector"></div>
                    <div class="step">
                        <div class="step-circle">2</div>
                        <span class="hidden sm:inline">Pagamento</span>
                    </div>
                    <div class="step-connector"></div>
                    <div class="step">
                        <div class="step-circle">3</div>
                        <span class="hidden sm:inline">Conferma</span>
                    </div>
                </div>

                <!-- Page Header -->
                <div class="text-center mb-12" data-aos="fade-up" data-aos-delay="200">
                    <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
                        Il Tuo Carrello
                    </h1>
                    <p class="text-xl text-gray-600 max-w-2xl mx-auto">
                        Rivedi i servizi selezionati e procedi con l'acquisto per iniziare il tuo progetto digitale
                    </p>
                </div>

                <div class="grid lg:grid-cols-3 gap-8">
                    <!-- Cart Items -->
                    <div class="lg:col-span-2 space-y-6">
                        <!-- Authentication/User Details Section -->
                        @if (!User.Identity.IsAuthenticated)
                        {
                            <div class="user-form-section" data-aos="fade-up" data-aos-delay="250">
                                <div class="login-prompt">
                                    <h3><i class="fa-solid fa-user-plus mr-2"></i>Accedi o Registrati</h3>
                                    <p>Per completare l'acquisto è necessario accedere al tuo account o registrarti</p>
                                </div>

                                <!-- Validation Summary -->
                                @if (!ViewData.ModelState.IsValid)
                                {
                                    <div class="alert alert-error shadow-lg mb-6">
                                        <div>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            <div>
                                                <h3 class="font-bold">Errori di Validazione</h3>
                                                <div class="text-xs">
                                                    @Html.ValidationSummary(false, "", new { @class = "text-red-600" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <!-- Auth Tabs -->
                                <div class="auth-tabs">
                                    <div class="auth-tab @(ViewData.ModelState.ContainsKey("Username") && ViewData.ModelState["Username"].Errors.Any() ? "" : "active")" onclick="switchAuthTab('register')" id="register-tab">
                                        <i class="fa-solid fa-user-plus mr-2"></i>Registrati
                                    </div>
                                    <div class="auth-tab @(ViewData.ModelState.ContainsKey("Username") && ViewData.ModelState["Username"].Errors.Any() ? "active" : "")" onclick="switchAuthTab('login')" id="login-tab">
                                        <i class="fa-solid fa-sign-in-alt mr-2"></i>Accedi
                                    </div>
                                </div>

                                <!-- Registration Form -->
                                <div class="auth-form @(ViewData.ModelState.ContainsKey("Username") && ViewData.ModelState["Username"].Errors.Any() ? "" : "active")" id="register-form">
                                    @using (Html.BeginForm("RegisterFromCart", "Payment", FormMethod.Post, new { id = "registerForm" }))
                                    {
                                        <input type="hidden" name="IsLogin" value="false" />

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="Nome">Nome <span class="required">*</span></label>
                                                <input type="text" id="Nome" name="Nome" required maxlength="50"
                                                       class="@(Html.ViewData.ModelState.IsValidField("Nome") ? "" : "error")"
                                                       value="@(ViewData.ModelState.ContainsKey("Nome") ? ViewData.ModelState["Nome"].Value.RawValue : "")" />
                                                @Html.ValidationMessage("Nome", "", new { @class = "field-validation-error" })
                                            </div>
                                            <div class="form-group">
                                                <label for="Cognome">Cognome <span class="required">*</span></label>
                                                <input type="text" id="Cognome" name="Cognome" required maxlength="50"
                                                       class="@(Html.ViewData.ModelState.IsValidField("Cognome") ? "" : "error")"
                                                       value="@(ViewData.ModelState.ContainsKey("Cognome") ? ViewData.ModelState["Cognome"].Value.RawValue : "")" />
                                                @Html.ValidationMessage("Cognome", "", new { @class = "field-validation-error" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label for="Email">Email <span class="required">*</span></label>
                                            <input type="email" id="Email" name="Email" required maxlength="100"
                                                   class="@(Html.ViewData.ModelState.IsValidField("Email") ? "" : "error")"
                                                   value="@(ViewData.ModelState.ContainsKey("Email") ? ViewData.ModelState["Email"].Value.RawValue : "")" />
                                            @Html.ValidationMessage("Email", "", new { @class = "field-validation-error" })
                                        </div>

                                        <div class="form-group">
                                            <label for="CF">Codice Fiscale <span class="required">*</span></label>
                                            <input type="text" id="CF" name="CF" required maxlength="16"
                                                   pattern="[A-Za-z0-9]{16}" title="Inserisci un codice fiscale valido di 16 caratteri"
                                                   class="@(Html.ViewData.ModelState.IsValidField("CF") ? "" : "error")"
                                                   value="@(ViewData.ModelState.ContainsKey("CF") ? ViewData.ModelState["CF"].Value.RawValue : "")" />
                                            @Html.ValidationMessage("CF", "", new { @class = "field-validation-error" })
                                        </div>

                                        <div class="form-group">
                                            <label for="Phone">Telefono <span class="required">*</span></label>
                                            <input type="tel" id="Phone" name="Phone" required maxlength="20"
                                                   class="@(Html.ViewData.ModelState.IsValidField("Phone") ? "" : "error")"
                                                   value="@(ViewData.ModelState.ContainsKey("Phone") ? ViewData.ModelState["Phone"].Value.RawValue : "")" />
                                            @Html.ValidationMessage("Phone", "", new { @class = "field-validation-error" })
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="DataNascita">Data di Nascita <span class="required">*</span></label>
                                                <input type="date" id="DataNascita" name="DataNascita" required
                                                       class="@(Html.ViewData.ModelState.IsValidField("DataNascita") ? "" : "error")"
                                                       value="@(ViewData.ModelState.ContainsKey("DataNascita") && ViewData.ModelState["DataNascita"].Value.RawValue != null ? Convert.ToDateTime(ViewData.ModelState["DataNascita"].Value.RawValue).ToString("yyyy-MM-dd") : "")" />
                                                @Html.ValidationMessage("DataNascita", "", new { @class = "field-validation-error" })
                                            </div>
                                            <div class="form-group">
                                                <label for="Piva">P.IVA (opzionale)</label>
                                                <input type="text" id="Piva" name="Piva" maxlength="11"
                                                       class="@(Html.ViewData.ModelState.IsValidField("Piva") ? "" : "error")"
                                                       value="@(ViewData.ModelState.ContainsKey("Piva") ? ViewData.ModelState["Piva"].Value.RawValue : "")" />
                                                @Html.ValidationMessage("Piva", "", new { @class = "field-validation-error" })
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label for="Indirizzo">Indirizzo <span class="required">*</span></label>
                                            <input type="text" id="Indirizzo" name="Indirizzo" required maxlength="100"
                                                   class="@(Html.ViewData.ModelState.IsValidField("Indirizzo") ? "" : "error")"
                                                   value="@(ViewData.ModelState.ContainsKey("Indirizzo") ? ViewData.ModelState["Indirizzo"].Value.RawValue : "")" />
                                            @Html.ValidationMessage("Indirizzo", "", new { @class = "field-validation-error" })
                                        </div>

                                        <div class="form-group">
                                            <label for="Citta">Città <span class="required">*</span></label>
                                            <input type="text" id="Citta" name="Citta" required maxlength="50"
                                                   class="@(Html.ViewData.ModelState.IsValidField("Citta") ? "" : "error")"
                                                   value="@(ViewData.ModelState.ContainsKey("Citta") ? ViewData.ModelState["Citta"].Value.RawValue : "")" />
                                            @Html.ValidationMessage("Citta", "", new { @class = "field-validation-error" })
                                        </div>

                                        <div class="form-row">
                                            <div class="form-group">
                                                <label for="Username">Username <span class="required">*</span></label>
                                                <input type="text" id="Username" name="Username" required maxlength="50"
                                                       class="@(Html.ViewData.ModelState.IsValidField("Username") ? "" : "error")"
                                                       value="@(ViewData.ModelState.ContainsKey("Username") ? ViewData.ModelState["Username"].Value.RawValue : "")" />
                                                @Html.ValidationMessage("Username", "", new { @class = "field-validation-error" })
                                            </div>
                                            <div class="form-group">
                                                <label for="Password">Password <span class="required">*</span></label>
                                                <input type="password" id="Password" name="Password" required
                                                       title="La password deve contenere almeno 8 caratteri, una lettera minuscola, una maiuscola, un numero e un carattere speciale (.!?&amp;$%)"
                                                       class="@(Html.ViewData.ModelState.IsValidField("Password") ? "" : "error")" />
                                                @Html.ValidationMessage("Password", "", new { @class = "field-validation-error" })
                                            </div>
                                        </div>

                                        <button type="submit" class="submit-btn">
                                            <i class="fa-solid fa-user-plus mr-2"></i>
                                            Registrati e Continua
                                        </button>
                                    }

                                    <div style="text-align: center; margin: 1rem 0; color: #6b7280;">
                                        <span>oppure</span>
                                    </div>

                                    <a href="@ViewBag.Response" class="google-login-btn">
                                        <svg width="20" height="20" viewBox="0 0 24 24">
                                            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                                            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                                            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                                            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                                        </svg>
                                        Registrati con Google
                                    </a>
                                </div>

                                <!-- Login Form -->
                                <div class="auth-form @(ViewData.ModelState.ContainsKey("Username") && ViewData.ModelState["Username"].Errors.Any() ? "active" : "")" id="login-form">
                                    @using (Html.BeginForm("RegisterFromCart", "Payment", FormMethod.Post, new { id = "loginForm" }))
                                    {
                                        <input type="hidden" name="IsLogin" value="true" />

                                        <div class="form-group">
                                            <label for="LoginUsername">Username <span class="required">*</span></label>
                                            <input type="text" id="LoginUsername" name="Username" required maxlength="50"
                                                   class="@(Html.ViewData.ModelState.IsValidField("Username") ? "" : "error")"
                                                   value="@(ViewData.ModelState.ContainsKey("Username") ? ViewData.ModelState["Username"].Value.RawValue : "")" />
                                            @Html.ValidationMessage("Username", "", new { @class = "field-validation-error" })
                                        </div>

                                        <div class="form-group">
                                            <label for="LoginPassword">Password <span class="required">*</span></label>
                                            <input type="password" id="LoginPassword" name="Password" required
                                                   class="@(Html.ViewData.ModelState.IsValidField("Password") ? "" : "error")" />
                                            @Html.ValidationMessage("Password", "", new { @class = "field-validation-error" })
                                        </div>

                                        <button type="submit" class="submit-btn">
                                            <i class="fa-solid fa-sign-in-alt mr-2"></i>
                                            Accedi e Continua
                                        </button>
                                    }

                                    <div style="text-align: center; margin: 1rem 0; color: #6b7280;">
                                        <span>oppure</span>
                                    </div>

                                    <a href="@ViewBag.Response" class="google-login-btn">
                                        <svg width="20" height="20" viewBox="0 0 24 24">
                                            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                                            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                                            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                                            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                                        </svg>
                                        Accedi con Google
                                    </a>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- User Details Display (Authenticated User) -->
                            <div class="user-form-section" data-aos="fade-up" data-aos-delay="250">
                                <h3 class="text-2xl font-bold text-gray-900 mb-4 flex items-center">
                                    <i class="fa-solid fa-user-check mr-2 text-green-600"></i>
                                    Dati di Fatturazione
                                </h3>

                                @if (cliente != null)
                                {
                                    <div class="grid md:grid-cols-2 gap-6">
                                        <div class="space-y-4">
                                            <div class="p-4 bg-gray-50 rounded-lg">
                                                <strong class="text-gray-700">Nome e Cognome:</strong>
                                                <p class="text-gray-900 font-medium">@cliente.Nome @cliente.Cognome</p>
                                            </div>
                                            <div class="p-4 bg-gray-50 rounded-lg">
                                                <strong class="text-gray-700">Email:</strong>
                                                <p class="text-gray-900 font-medium">@cliente.Email</p>
                                            </div>
                                            <div class="p-4 bg-gray-50 rounded-lg">
                                                <strong class="text-gray-700">Telefono:</strong>
                                                <p class="text-gray-900 font-medium">@cliente.Phone</p>
                                            </div>
                                        </div>
                                        <div class="space-y-4">
                                            <div class="p-4 bg-gray-50 rounded-lg">
                                                <strong class="text-gray-700">Indirizzo:</strong>
                                                <p class="text-gray-900 font-medium">@cliente.Indirizzo</p>
                                                <p class="text-gray-900 font-medium">@cliente.Citta</p>
                                            </div>
                                            <div class="p-4 bg-gray-50 rounded-lg">
                                                <strong class="text-gray-700">Codice Fiscale:</strong>
                                                <p class="text-gray-900 font-medium">@cliente.CF</p>
                                            </div>
                                            @if (!string.IsNullOrEmpty(cliente.Piva))
                                            {
                                                <div class="p-4 bg-gray-50 rounded-lg">
                                                    <strong class="text-gray-700">P.IVA:</strong>
                                                    <p class="text-gray-900 font-medium">@cliente.Piva</p>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <div class="mt-6 text-center">
                                        <a href="@Url.Action("EditProfilo", "Home", new { id = cliente.IdCliente })"
                                           class="inline-flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors">
                                            <i class="fa-solid fa-edit mr-2"></i>
                                            Modifica Dati
                                        </a>
                                    </div>
                                }
                            </div>
                        }

                        <!-- Cart Items List -->
                        @foreach (var item in Model)
                        {
                            foreach (var p in lista)
                            {
                                if (p.IdProdotto == item.IdProdotto)
                                {
                                    string packageType = "";
                                    string iconClass = "";

                                    if (p.Costo < 200)
                                    {
                                        packageType = "Pacchetto Basic";
                                        iconClass = "fa-solid fa-lightbulb text-yellow-600";
                                    }
                                    else if (p.Costo < 800)
                                    {
                                        packageType = "Pacchetto Plus";
                                        iconClass = "fa-solid fa-rocket text-yellow-600";
                                    }
                                    else
                                    {
                                        packageType = "Pacchetto Professional";
                                        iconClass = "fa-solid fa-crown text-yellow-600";
                                    }

                                    <div class="cart-item-card rounded-3xl p-6 shadow-lg" data-aos="fade-up" data-aos-delay="300">
                                        <div class="flex flex-col lg:flex-row gap-6">
                                            <!-- Product Image -->
                                            <div class="lg:w-48 flex-shrink-0">
                                                <div class="aspect-square bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl p-6 relative overflow-hidden">
                                                    <img src="~/Content/Img/@p.Image" alt="@packageType" class="w-full h-full object-cover rounded-xl">
                                                    <!-- Package Badge -->
                                                    <div class="absolute top-4 right-4">
                                                        <div class="w-12 h-12 bg-white/90 rounded-full flex items-center justify-center shadow-lg">
                                                            <i class="@iconClass text-xl"></i>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Product Details -->
                                            <div class="flex-1">
                                                <div class="flex flex-col h-full">
                                                    <!-- Header -->
                                                    <div class="flex justify-between items-start mb-4">
                                                        <div>
                                                            <h3 class="text-2xl font-bold text-gray-900 mb-2">@packageType</h3>
                                                            <p class="text-gray-600 mb-4">@p.DescrizioneBreve</p>

                                                            <!-- Features -->
                                                            <div class="flex flex-wrap gap-2 mb-4">
                                                                <span class="px-3 py-1 bg-yellow-100 text-yellow-600 rounded-full text-sm font-medium">Consulenza</span>
                                                                <span class="px-3 py-1 bg-yellow-100 text-yellow-600 rounded-full text-sm font-medium">PDF Report</span>
                                                                @if (p.Costo >= 800)
                                                                {
                                                                    <span class="px-3 py-1 bg-yellow-100 text-yellow-600 rounded-full text-sm font-medium">Strategia</span>
                                                                    <span class="px-3 py-1 bg-yellow-100 text-yellow-600 rounded-full text-sm font-medium">Sito Web</span>
                                                                }
                                                            </div>
                                                        </div>

                                                        <!-- Remove Button -->
                                                        <a href="@Url.Action("Delete", "Home", new { id = item.IdProdotto })"
                                                           class="btn btn-circle btn-sm btn-error btn-outline hover:btn-error">
                                                            <i class="fa-solid fa-trash text-sm"></i>
                                                        </a>
                                                    </div>

                                                    <!-- Price and Quantity -->
                                                    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-end gap-4 mt-auto">
                                                        <!-- Quantity Controls -->
                                                        <div class="quantity-controls flex items-center gap-3">
                                                            <span class="text-sm font-semibold text-gray-700">Quantità:</span>
                                                            <div class="flex items-center gap-2">
                                                                <a href="@Url.Action("Less", "Home", new { id = item.IdProdotto })" class="quantity-btn">
                                                                    <i class="fa-solid fa-minus text-sm"></i>
                                                                </a>
                                                                <div class="quantity-display">@item.Quantita</div>
                                                                <a href="@Url.Action("More", "Home", new { id = item.IdProdotto })" class="quantity-btn">
                                                                    <i class="fa-solid fa-plus text-sm"></i>
                                                                </a>
                                                            </div>
                                                        </div>

                                                        <!-- Price -->
                                                        <div class="text-right">
                                                            <div class="text-sm text-gray-500 mb-1">Prezzo unitario: €@p.Costo</div>
                                                            <div class="text-3xl font-bold text-gray-900">
                                                                €@(p.Costo * item.Quantita)
                                                                <span class="text-lg text-gray-500 font-normal">totale</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    </div>

                    <!-- Checkout Summary -->
                    <div class="lg:col-span-1">
                        <div class="checkout-summary" data-aos="fade-up" data-aos-delay="400">
                            <h3 class="text-2xl font-bold text-gray-900 mb-6 text-center">
                                <i class="fa-solid fa-receipt mr-2 text-yellow-600"></i>
                                Riepilogo Ordine
                            </h3>

                            <!-- Order Details -->
                            <div class="space-y-4 mb-6">
                                @{
                                    decimal subtotale = 0;
                                    int totalItems = 0;
                                }
                                @foreach (var item in Model)
                                {
                                    foreach (var p in lista)
                                    {
                                        if (p.IdProdotto == item.IdProdotto)
                                        {
                                            decimal itemTotal = p.Costo * item.Quantita;
                                            subtotale += itemTotal;
                                            totalItems += item.Quantita;

                                            <div class="flex justify-between items-center py-2 border-b border-gray-200">
                                                <div>
                                                    <span class="font-medium text-gray-900">@item.Quantita×</span>
                                                    <span class="text-gray-700">@(p.Costo < 200 ? "Basic" : p.Costo < 800 ? "Plus" : "Pro")</span>
                                                </div>
                                                <span class="font-semibold text-gray-900">€@itemTotal</span>
                                            </div>
                                        }
                                    }
                                }

                                <!-- Subtotal -->
                                <div class="flex justify-between items-center py-3 text-lg">
                                    <span class="font-semibold text-gray-900">Subtotale (@totalItems @(totalItems == 1 ? "articolo" : "articoli")):</span>
                                    <span class="font-bold text-gray-900">€@subtotale</span>
                                </div>
                            </div>

                            <!-- Total -->
                            <div class="total-display">
                                Totale: €@subtotale
                            </div>

                            <!-- Payment Methods -->
                            <div class="payment-methods">
                                <h4 class="font-bold text-lg text-gray-900 mb-4 text-center">
                                    <i class="fa-solid fa-credit-card mr-2"></i>
                                    Metodi di Pagamento
                                </h4>

                                <div class="space-y-4">
                                    <!-- PayPal Button -->
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <a href="@Url.Action("ConfirmPayment", "Payment")"
                                           class="bg-yellow-400 transition duration-300 ease-in-out hover:scale-105 w-full p-4 rounded-xl flex items-center justify-center text-white font-semibold"
                                           id="paypal-btn">
                                            <img src="~/Content/Img/PayPal.svg" alt="PayPal" class="h-8">
                                        </a>
                                    }
                                    else
                                    {
                                        <button class="bg-gray-400 w-full p-4 rounded-xl flex items-center justify-center text-white font-semibold cursor-not-allowed opacity-50"
                                                disabled id="paypal-btn-disabled" title="Completa registrazione/login per procedere">
                                            <img src="~/Content/Img/PayPal.svg" alt="PayPal" class="h-8" style="filter: grayscale(100%);">
                                        </button>
                                        <p class="text-sm text-gray-600 text-center">
                                            <i class="fa-solid fa-info-circle mr-1"></i>
                                            Completa la registrazione o accedi per procedere con il pagamento
                                        </p>
                                    }

                                    <!-- Clear Cart -->
                                    <a href="@Url.Action("DeleteCart", "Payment")"
                                       class="btn btn-outline-error w-full btn-lg">
                                        <i class="fa-solid fa-trash mr-2"></i>
                                        Svuota Carrello
                                    </a>
                                </div>

                                <!-- Security Badges -->
                                <div class="security-badges">
                                    <div class="security-badge">
                                        <i class="fa-solid fa-shield-halved"></i>
                                        <span>Sicuro</span>
                                    </div>
                                    <div class="security-badge">
                                        <i class="fa-solid fa-lock"></i>
                                        <span>Crittografato</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Guarantees -->
                            <div class="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-xl">
                                <h5 class="font-semibold text-yellow-700 mb-3 flex items-center">
                                    <i class="fa-solid fa-shield-check mr-2"></i>
                                    Le Nostre Garanzie
                                </h5>
                                <ul class="space-y-2 text-sm text-yellow-700">
                                    <li class="flex items-center">
                                        <i class="fa-solid fa-check mr-2 text-yellow-600"></i>
                                        Soluzioni personalizzate
                                    </li>
                                    <li class="flex items-center">
                                        <i class="fa-solid fa-check mr-2 text-yellow-600"></i>
                                        Supporto dedicato
                                    </li>
                                    <li class="flex items-center">
                                        <i class="fa-solid fa-check mr-2 text-yellow-600"></i>
                                        Tempi di consegna garantiti
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Continue Shopping -->
                <div class="text-center mt-12" data-aos="fade-up" data-aos-delay="500">
                    <a href="@Url.Action("Index", "Home", new { }, null)#service" class="continue-shopping">
                        <i class="fa-solid fa-arrow-left"></i>
                        Continua lo Shopping
                    </a>
                </div>
            </div>
        </div>
    </section>
}

@section scripts {
    <script>
        // Authentication tab switching con gestione degli errori del ModelState
        function switchAuthTab(tabType) {
            // Hide all forms
            document.getElementById('register-form').classList.remove('active');
            document.getElementById('login-form').classList.remove('active');

            // Remove active class from all tabs
            document.getElementById('register-tab').classList.remove('active');
            document.getElementById('login-tab').classList.remove('active');

            // Show selected form and activate tab
            if (tabType === 'register') {
                document.getElementById('register-form').classList.add('active');
                document.getElementById('register-tab').classList.add('active');
            } else {
                document.getElementById('login-form').classList.add('active');
                document.getElementById('login-tab').classList.add('active');
            }
        }

        // Form validation with enhanced error display
        function validateForm(formId) {
            const form = document.getElementById(formId);
            const inputs = form.querySelectorAll('input[required]');
            let isValid = true;

            inputs.forEach(input => {
                // Skip validation for fields that already have server-side errors
                const hasServerError = input.parentElement.querySelector('.field-validation-error:not([style*="display: none"])');
                if (hasServerError && hasServerError.textContent.trim() !== '') {
                    isValid = false;
                    input.classList.add('error');
                    return;
                }

                // Remove previous client-side error styling
                input.classList.remove('error');
                const clientErrorSpan = input.parentElement.querySelector('.client-validation-error');
                if (clientErrorSpan) {
                    clientErrorSpan.remove();
                }

                if (!input.value.trim()) {
                    input.classList.add('error');
                    showFieldError(input, 'Questo campo è obbligatorio', 'client-validation-error');
                    isValid = false;
                } else {
                    // Specific validations
                    if (input.type === 'email' && input.value) {
                        const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                        if (!emailRegex.test(input.value)) {
                            input.classList.add('error');
                            showFieldError(input, 'Inserisci un indirizzo email valido', 'client-validation-error');
                            isValid = false;
                        }
                    }

                    if (input.name === 'CF' && input.value) {
                        if (input.value.length !== 16) {
                            input.classList.add('error');
                            showFieldError(input, 'Il codice fiscale deve essere di 16 caratteri', 'client-validation-error');
                            isValid = false;
                        }
                    }

                    if (input.name === 'Password' && input.value && formId === 'registerForm') {
                        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[.!?@@&$%]).{8,}$/;
                        if (!passwordRegex.test(input.value)) {
                            input.classList.add('error');
                            showFieldError(input, 'La password deve contenere almeno 8 caratteri, una lettera minuscola, una maiuscola, un numero e un carattere speciale (.!?@@&$%)', 'client-validation-error');
                            isValid = false;
                        }
                    }

                    if (input.name === 'Piva' && input.value) {
                        if (input.value.length !== 11 || !/^\d{11}$/.test(input.value)) {
                            input.classList.add('error');
                            showFieldError(input, 'La P.IVA deve contenere esattamente 11 cifre', 'client-validation-error');
                            isValid = false;
                        }
                    }
                }
            });

            return isValid;
        }

        // Helper function to show field-specific errors
        function showFieldError(input, message, className) {
            let errorSpan = input.parentElement.querySelector('.' + className);
            if (!errorSpan) {
                errorSpan = document.createElement('span');
                errorSpan.className = className + ' text-red-500 text-sm mt-1';
                input.parentElement.appendChild(errorSpan);
            }
            errorSpan.textContent = message;
            errorSpan.style.display = 'block';
        }

        // Enhanced cart interactions
        document.addEventListener('DOMContentLoaded', function() {
            // Check if there are validation errors and switch to appropriate tab
            const hasLoginErrors = document.querySelector('#login-form .field-validation-error') &&
                                  document.querySelector('#login-form .field-validation-error').textContent.trim() !== '';
            const hasRegisterErrors = document.querySelector('#register-form .field-validation-error') &&
                                     document.querySelector('#register-form .field-validation-error').textContent.trim() !== '';

            // Determine which tab to show based on errors
            if (hasLoginErrors && !hasRegisterErrors) {
                switchAuthTab('login');
            } else if (hasRegisterErrors && !hasLoginErrors) {
                switchAuthTab('register');
            } else if (hasLoginErrors && hasRegisterErrors) {
                // If both have errors, show login (assuming user was trying to login)
                switchAuthTab('login');
            }
            // If no errors, default behavior (register tab active) is maintained

            // Form submission handling with better error management
            const registerForm = document.getElementById('registerForm');
            const loginForm = document.getElementById('loginForm');

            if (registerForm) {
                registerForm.addEventListener('submit', function(e) {
                    // Only validate if there are no server-side errors
                    const hasServerErrors = this.querySelectorAll('.field-validation-error').length > 0;

                    if (!hasServerErrors && !validateForm('registerForm')) {
                        e.preventDefault();

                        // Scroll to first error
                        const firstError = this.querySelector('.error');
                        if (firstError) {
                            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            firstError.focus();
                        }

                        return false;
                    }

                    // Add loading state
                    const submitBtn = this.querySelector('.submit-btn');
                    submitBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin mr-2"></i>Registrazione in corso...';
                    submitBtn.disabled = true;
                });
            }

            if (loginForm) {
                loginForm.addEventListener('submit', function(e) {
                    // Only validate if there are no server-side errors
                    const hasServerErrors = this.querySelectorAll('.field-validation-error').length > 0;

                    if (!hasServerErrors && !validateForm('loginForm')) {
                        e.preventDefault();

                        // Scroll to first error
                        const firstError = this.querySelector('.error');
                        if (firstError) {
                            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            firstError.focus();
                        }

                        return false;
                    }

                    // Add loading state
                    const submitBtn = this.querySelector('.submit-btn');
                    submitBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin mr-2"></i>Accesso in corso...';
                    submitBtn.disabled = true;
                });
            }

            // Real-time validation feedback with server-side error preservation
            const allInputs = document.querySelectorAll('input');
            allInputs.forEach(input => {
                // Preserve server-side errors on page load
                const serverError = input.parentElement.querySelector('.field-validation-error');
                if (serverError && serverError.textContent.trim() !== '') {
                    input.classList.add('error');
                    serverError.style.display = 'block';
                }

                input.addEventListener('blur', function() {
                    // Don't show client validation if server error exists
                    const hasServerError = this.parentElement.querySelector('.field-validation-error') &&
                                          this.parentElement.querySelector('.field-validation-error').textContent.trim() !== '';

                    if (!hasServerError) {
                        if (this.hasAttribute('required') && !this.value.trim()) {
                            this.classList.add('error');
                            showFieldError(this, 'Questo campo è obbligatorio', 'client-validation-error');
                        } else {
                            this.classList.remove('error');
                            const errorSpan = this.parentElement.querySelector('.client-validation-error');
                            if (errorSpan) {
                                errorSpan.remove();
                            }
                        }
                    }
                });

                input.addEventListener('input', function() {
                    // Clear client-side errors when user starts typing
                    const clientError = this.parentElement.querySelector('.client-validation-error');
                    if (clientError) {
                        clientError.remove();
                        this.classList.remove('error');
                    }

                    // If there's a server error, add class back
                    const serverError = this.parentElement.querySelector('.field-validation-error');
                    if (serverError && serverError.textContent.trim() !== '') {
                        this.classList.add('error');
                    }
                });
            });

            // Auto-format Codice Fiscale
            const cfInput = document.getElementById('CF');
            if (cfInput) {
                cfInput.addEventListener('input', function() {
                    this.value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
                });
            }

            // Auto-format P.IVA
            const pivaInput = document.getElementById('Piva');
            if (pivaInput) {
                pivaInput.addEventListener('input', function() {
                    this.value = this.value.replace(/[^0-9]/g, '');
                });
            }

            // Phone number formatting
            const phoneInput = document.getElementById('Phone');
            if (phoneInput) {
                phoneInput.addEventListener('input', function() {
                    this.value = this.value.replace(/[^0-9+\-\s]/g, '');
                });
            }

            // Add loading state to payment buttons
            const paymentButtons = document.querySelectorAll('.payment-method-btn, #paypal-btn');

            paymentButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    if (!this.hasAttribute('disabled')) {
                        // Add loading spinner
                        const originalContent = this.innerHTML;
                        this.innerHTML = '<i class="fa-solid fa-spinner fa-spin mr-2"></i>Elaborazione...';
                        this.style.pointerEvents = 'none';

                        // Restore original content if navigation doesn't happen
                        setTimeout(() => {
                            this.innerHTML = originalContent;
                            this.style.pointerEvents = 'auto';
                        }, 3000);
                    }
                });
            });

            // Quantity change animations
            const quantityBtns = document.querySelectorAll('.quantity-btn');

            quantityBtns.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Add loading state
                    const icon = this.querySelector('i');
                    const originalClass = icon.className;
                    icon.className = 'fa-solid fa-spinner fa-spin text-sm';

                    // Navigate after short delay for visual feedback
                    setTimeout(() => {
                        window.location.href = this.href;
                    }, 300);
                });
            });

            // Remove item confirmation
            const removeButtons = document.querySelectorAll('a[href*="Delete"]');

            removeButtons.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();

                    if (confirm('Sei sicuro di voler rimuovere questo articolo dal carrello?')) {
                        // Add removal animation
                        const cartItem = this.closest('.cart-item-card');
                        cartItem.style.transform = 'translateX(100%)';
                        cartItem.style.opacity = '0';

                        setTimeout(() => {
                            window.location.href = this.href;
                        }, 300);
                    }
                });
            });

            // Clear cart confirmation
            const clearCartBtn = document.querySelector('a[href*="DeleteCart"]');

            if (clearCartBtn) {
                clearCartBtn.addEventListener('click', function(e) {
                    e.preventDefault();

                    if (confirm('Sei sicuro di voler svuotare completamente il carrello?')) {
                        // Add loading state
                        this.innerHTML = '<i class="fa-solid fa-spinner fa-spin mr-2"></i>Svuotando...';
                        this.style.pointerEvents = 'none';

                        setTimeout(() => {
                            window.location.href = this.href;
                        }, 500);
                    }
                });
            }

            // Smooth scroll animation for form focus
            const formInputs = document.querySelectorAll('.form-group input');
            formInputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.parentElement.style.transform = 'scale(1.02)';
                });

                input.addEventListener('blur', function() {
                    this.parentElement.style.transform = 'scale(1)';
                });
            });

            // Enhanced hover effects for auth tabs
            const authTabs = document.querySelectorAll('.auth-tab');
            authTabs.forEach(tab => {
                tab.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('active')) {
                        this.style.background = 'rgba(251, 191, 36, 0.1)';
                    }
                });

                tab.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('active')) {
                        this.style.background = 'transparent';
                    }
                });
            });
        });

        // Add CSS keyframes for animations
        const style = document.createElement('style');
        style.textContent = `
            .form-group {
                transition: all 0.3s ease;
            }

            .auth-tab {
                transition: all 0.3s ease;
            }

            .submit-btn {
                transition: all 0.3s ease;
            }

            .google-login-btn {
                transition: all 0.3s ease;
            }

            input.error {
                animation: shake 0.5s ease-in-out;
                border-color: #ef4444 !important;
                box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1) !important;
            }

            .field-validation-error, .client-validation-error {
                animation: fadeInError 0.3s ease-in-out;
                display: block !important;
                color: #ef4444;
                font-size: 0.875rem;
                margin-top: 0.25rem;
            }

            @@keyframes fadeInError {
                from {
                    opacity: 0;
                    transform: translateY(-10px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            @@keyframes shake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-5px); }
                75% { transform: translateX(5px); }
            }

            .user-form-section {
                transition: all 0.3s ease;
            }

            @@media (max-width: 768px) {
                .auth-tabs {
                    flex-direction: column;
                    gap: 6px;
                }

                .form-row {
                    grid-template-columns: 1fr;
                }

                .user-form-section {
                    padding: 1.5rem;
                }
            }
        `;
        document.head.appendChild(style);
    </script>
}